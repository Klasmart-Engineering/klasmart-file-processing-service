pipelines:
  branches:
    '{main,hotfix/**}':
      - step:
          name: "Compile"
          image: golang:alpine
          script:
            - apk add git --no-cache
            - set +x
            - echo "machine gitlab.badanamu.com.cn" >> ~/.netrc
            - echo "  login $GITLAB_USERNAME"       >> ~/.netrc
            - echo "  password $GITLAB_PASSWORD"    >> ~/.netrc
            - set -x
            - go env -w GO111MODULE=on
            - export GOPRIVATE=gitlab.badanamu.com.cn
            - export NETRC=/root/.netrc
            - go mod tidy
            - go get
            - go mod vendor
            - go build -o deploy/handler -ldflags "-X gitlab.badanamu.com.cn/calmisland/kidsloop-file-processing-service/constant.GitHash=$(git rev-list -1 HEAD) -X gitlab.badanamu.com.cn/calmisland/kidsloop-file-processing-service/constant.BuildTimestamp=$(date +%s)"
            - echo $BUILD_RESULT
          after-script:
            - BUILD_STATUS="success"
            - if [[ $BITBUCKET_EXIT_CODE -ne 0 ]]; then BUILD_STATUS="failure"; fi
            - pipe: atlassian/slack-notify:1.0.2
              variables:
                WEBHOOK_URL: $WEBHOOK_URL
                PRETEXT: '"$BITBUCKET_REPO_SLUG - Pipeline ${BITBUCKET_GIT_HTTP_ORIGIN}/addon/pipelines/home#!/results/${BITBUCKET_BUILD_NUMBER}"'
                MESSAGE: "build has exited with [$BUILD_STATUS] status"
          caches:
            - gomodules

          artifacts:
            - deploy/*

      - step:
          name: "Build & Push Docker image"
          image: python:3.7.4-alpine3.10
          script:
            - pip3 install -U awscli

            - export BRANCH_TAG=$(echo "$BITBUCKET_BRANCH" | sed -E 's/([^0-9a-zA-Z]+)/-/g' | awk '{print tolower($0)}')
            - export REPO=$DOCKER_REPO_URL/kidsloop-file-processing-service # DOCKER_REPO_URL is workspace wide variable

            - aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin $DOCKER_REPO_URL
            - aws s3 cp s3://$S3_BUCKET/keys/ deploy/ --recursive --sse aws:kms --sse-kms-key-id $KMS_KEY

            - docker build -t kidsloop-file-processing-service deploy/
            - docker tag kidsloop-file-processing-service:latest $REPO:$BRANCH_TAG
            - docker tag kidsloop-file-processing-service:latest $REPO:$BRANCH_TAG-latest
            - docker tag kidsloop-file-processing-service:latest $REPO:$BRANCH_TAG-$BITBUCKET_BUILD_NUMBER
            - docker tag kidsloop-file-processing-service:latest $REPO:$BRANCH_TAG-${BITBUCKET_COMMIT:0:7}

            - docker push $REPO:$BRANCH_TAG
            - docker push $REPO:$BRANCH_TAG-latest
            - docker push $REPO:$BRANCH_TAG-$BITBUCKET_BUILD_NUMBER
            - docker push $REPO:$BRANCH_TAG-${BITBUCKET_COMMIT:0:7}

            - export AWS_ACCESS_KEY_ID=$AWS_ALPHA_KEY_ID && export AWS_SECRET_ACCESS_KEY=$AWS_ALPHA_ACCESS_KEY && export AWS_DEFAULT_REGION=ap-northeast-2
            - aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin $DOCKER_ALPHA_REPO

            - export ALPHA_DOCKER_REPO_URL="871601235178.dkr.ecr.ap-northeast-2.amazonaws.com"
            - docker tag kidsloop-file-processing-service:latest ${ALPHA_DOCKER_REPO_URL}/kidsloop-file-processing-service:latest
            - docker push ${ALPHA_DOCKER_REPO_URL}/kidsloop-file-processing-service:latest

          after-script:
            - BUILD_STATUS="success"
            - if [[ $BITBUCKET_EXIT_CODE -ne 0 ]]; then BUILD_STATUS="failure"; fi
            - pipe: atlassian/slack-notify:1.0.2
              variables:
                WEBHOOK_URL: $WEBHOOK_URL
                PRETEXT: '"[Alpha] $BITBUCKET_REPO_SLUG - Pipeline ${BITBUCKET_GIT_HTTP_ORIGIN}/addon/pipelines/home#!/results/${BITBUCKET_BUILD_NUMBER}"'
                MESSAGE: "ECR push has exited with [$BUILD_STATUS] status"

          services:
            - docker

      - step:
          name: "Update ECS"
          image: python:3.7.4-alpine3.10
          script:
            - pip3 install -U awscli

            - apk add git jq --no-cache

            - assume_role=$(aws sts assume-role --role-arn arn:aws:iam::${ACC_ID}:role/cross_account_deployment_role --role-session-name deployment)

            - export AWS_ACCESS_KEY_ID=$(echo $assume_role | jq -r .Credentials.AccessKeyId) && export AWS_SECRET_ACCESS_KEY=$(echo $assume_role | jq -r .Credentials.SecretAccessKey) && export AWS_SESSION_TOKEN=$(echo $assume_role | jq -r .Credentials.SessionToken) && export AWS_DEFAULT_REGION=ap-northeast-2

            - aws ecs update-service --service arn:aws:ecs:${AWS_DEFAULT_REGION}:${ACC_ID}:service/${CLUSTER}/${CLUSTER}-file-processing-service --force-new-deployment --cluster $CLUSTER

          after-script:
            - BUILD_STATUS="success"
            - if [[ $BITBUCKET_EXIT_CODE -ne 0 ]]; then BUILD_STATUS="failure"; fi
            - pipe: atlassian/slack-notify:1.0.2
              variables:
                WEBHOOK_URL: $WEBHOOK_URL
                PRETEXT: '"[Alpha] $BITBUCKET_REPO_SLUG - Pipeline ${BITBUCKET_GIT_HTTP_ORIGIN}/addon/pipelines/home#!/results/${BITBUCKET_BUILD_NUMBER}"'
                MESSAGE: "ECS update has exited with [$BUILD_STATUS] status"

      # This step will deploy an image to the new "landing zone" environment via ArgoCD.
      # See here for the equivalent Github Actions pipeline: https://github.com/KL-Engineering/user-service/pull/27
      - step: &step-deploy-landing-zone
          name: "Deploy built image to the Kidsloop landing zone"
          image: argoproj/argocd:v2.3.1
          script:
            # What are we deploying?
            - export BRANCH_TAG=$(echo "$BITBUCKET_BRANCH" | sed -E 's/([^0-9a-zA-Z]+)/-/g' | awk '{print tolower($0)}')
            - export COMMIT_TAG=$(echo $BITBUCKET_COMMIT | cut -c1-7)
            - export DEPLOY_TAG=$BRANCH_TAG-$COMMIT_TAG
            - echo "Tag to deploy - $DEPLOY_TAG"

            # Set up port forwarding
            - echo $TOOLS_KUBECONFIG_CONTENT_B64 | base64 -d > $BITBUCKET_CLONE_DIR/kubeconfig.yml
            - >
              PORTFORWARD_CONTAINER=$(
              docker run
              --volume $BITBUCKET_CLONE_DIR/kubeconfig.yml:/mnt/kubeconfig.yml
              --env KUBECONFIG=/mnt/kubeconfig.yml
              --publish 8080:8080
              --hostname kubeproxy
              --detach bitnami/kubectl:1.21
              port-forward -n argocd svc/argocd-server
              --address 0.0.0.0 8080:80
              )
            - sleep 5

            # Deploy tag to environment with ArgoCD
            - >
              export
              ARGOCD_SERVER=localhost:8080
              ARGOCD_APP=uk-landingzone-file-processing
              ARGOCD_APP_CHART_TAG_PATH=fileProcessing.tag
              ARGOCD_OPTS='--grpc-web --insecure --plaintext'
            - >
              argocd login $ARGOCD_SERVER
              --username $ARGOCD_AUTH_USERNAME
              --password $ARGOCD_AUTH_PASSWORD
              $ARGOCD_OPTS
            - argocd app get $ARGOCD_APP
            - argocd app set $ARGOCD_APP -p $ARGOCD_APP_CHART_TAG_PATH=$DEPLOY_TAG
            - argocd app sync $ARGOCD_APP --timeout 300

            # Clean up tasks
            - docker logs $PORTFORWARD_CONTAINER
            - docker kill $PORTFORWARD_CONTAINER
            - docker rm $PORTFORWARD_CONTAINER
          services:
            - docker
          caches:
            - docker

    feature/lambda-test:
      - step:
          name: "Build and Test"
          image: golang:alpine
          script:
            - apk add git build-base exiftool --no-cache
            - set +x
            - echo "machine gitlab.badanamu.com.cn" >> ~/.netrc
            - echo "  login $GITLAB_USERNAME"       >> ~/.netrc
            - echo "  password $GITLAB_PASSWORD"    >> ~/.netrc
            - set -x
            - go env -w GO111MODULE=on
            - export GOPRIVATE=gitlab.badanamu.com.cn
            - export NETRC=/root/.netrc
            - go mod tidy
            - go get
            - go mod vendor
            - go build -o deploy/handler -ldflags "-X gitlab.badanamu.com.cn/calmisland/kidsloop-file-processing-service/constant.GitHash=$(git rev-list -1 HEAD) -X gitlab.badanamu.com.cn/calmisland/kidsloop-file-processing-service/constant.BuildTimestamp=$(date +%s)"
            - go test ./...
            - echo $BUILD_RESULT
          caches:
            - gomodules

          artifacts:
            - deploy/*

      - step:
          name: "Build & Push Docker image"
          image: python:3.7.4-alpine3.10
          script:
            - pip3 install -U awscli

            - export BRANCH_TAG=$(echo "$BITBUCKET_BRANCH" | sed -E 's/([^0-9a-zA-Z]+)/-/g' | awk '{print tolower($0)}')
            - export REPO=$DOCKER_REPO_URL/kidsloop-file-processing-service # DOCKER_REPO_URL is workspace wide variable

            - aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin $DOCKER_REPO_URL
            - aws s3 cp s3://$S3_BUCKET/keys/ deploy/ --recursive --sse aws:kms --sse-kms-key-id $KMS_KEY

            - docker build -t kidsloop-file-processing-service deploy/
            - docker tag kidsloop-file-processing-service:latest $REPO:$BRANCH_TAG
            - docker tag kidsloop-file-processing-service:latest $REPO:$BRANCH_TAG-latest
            - docker tag kidsloop-file-processing-service:latest $REPO:$BRANCH_TAG-$BITBUCKET_BUILD_NUMBER
            - docker tag kidsloop-file-processing-service:latest $REPO:$BRANCH_TAG-${BITBUCKET_COMMIT:0:7}

            - docker push $REPO:$BRANCH_TAG
            - docker push $REPO:$BRANCH_TAG-latest
            - docker push $REPO:$BRANCH_TAG-$BITBUCKET_BUILD_NUMBER
            - docker push $REPO:$BRANCH_TAG-${BITBUCKET_COMMIT:0:7}
          services:
            - docker

definitions:
  caches:
    gomodules: vendor
